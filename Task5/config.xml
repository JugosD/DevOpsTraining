<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.10">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@1.5.2">
          <name>environment</name>
          <description></description>
          <randomName>choice-parameter-16808076744776</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.27">
              <script>&quot;knife environment list&quot;.execute().text.tokenize()</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.27">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>Deploy</projectName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@1.5.2">
          <name>role</name>
          <description></description>
          <randomName>choice-parameter-16808104135147</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.27">
              <script>&quot;knife role list&quot;.execute().text.tokenize()</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.27">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>Deploy</projectName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.ChoiceParameter>
        <com.seitenbau.jenkins.plugins.dynamicparameter.StringParameterDefinition plugin="dynamicparameter@0.2.0">
          <name>artifactVersion</name>
          <description></description>
          <__uuid>008df121-7157-4ace-9852-ce782d17d79f</__uuid>
          <__remote>false</__remote>
          <__script>artifacts = &quot;&quot;&quot; curl --insecure \
                            --url https://builder:5000/v2/webapp/tags/list \
                 &quot;&quot;&quot;.execute().text
parser = new groovy.json.JsonSlurper()
list = parser.parseText artifacts
list.tags.last()</__script>
          <__localBaseDirectory serialization="custom">
            <hudson.FilePath>
              <default>
                <remote>/var/lib/jenkins/dynamic_parameter/classpath</remote>
              </default>
              <boolean>true</boolean>
            </hudson.FilePath>
          </__localBaseDirectory>
          <__remoteBaseDirectory>dynamic_parameter_classpath</__remoteBaseDirectory>
          <__classPath></__classPath>
          <readonlyInputField>false</readonlyInputField>
        </com.seitenbau.jenkins.plugins.dynamicparameter.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.29">
    <script>def gitUrl = { credentials -&gt;
    credentials = credentials ? &quot;$credentials@&quot; : &quot;&quot;
    &quot;https://${credentials}github.com/JugosD/chef-repo.git&quot;
}

cookbook            = &quot;base&quot;
attributesFileName  = &quot;cookbooks/$cookbook/attributes/default.rb&quot;
metadataFileName    = &quot;cookbooks/$cookbook/metadata.rb&quot;
environmentFileName = &quot;environments/${environment}.json&quot;

@NonCPS
def updateAttr(text, version) {
    def expr = /(.*training.*deploy_version.*=\s*)&quot;([0-9.]+)&quot;/
    text = text.readLines().collect {
        (it =~ expr).each {match, header, version_text -&gt;
            it = &quot;${header}\&quot;${version}\&quot;&quot;
        }
        it
    }.join(&quot;\n&quot;)
}

@NonCPS
def updateMeta(text) {
    def expr = /(\s*version\s+)&quot;([0-9.]+)&quot;/
    def version
    text = text.readLines().collect {
        (it =~ expr).each {match, header, version_text -&gt;
            def (major, minor, build) = version_text.split(&quot;[.]&quot;)
            version = &quot;${major}.${minor}.${(build as Integer) + 1}&quot;
            it = &quot;${header}\&quot;${version}\&quot;&quot;
        }
        it
    }.join(&quot;\n&quot;)
    [text: text, version: version]
}

@NonCPS
def updateEnv(text, version) {
    def env = new groovy.json.JsonSlurper().parseText(text)
    env.cookbook_versions[cookbook] = &quot;= $version&quot;
    def json = groovy.json.JsonOutput.toJson(env)
    groovy.json.JsonOutput.prettyPrint(json)
}

node(&quot;master&quot;) {
    stage(&quot;Preparation&quot;) {
        git gitUrl()
    }
    stage(&quot;Update versions&quot;) {
        // update artifact version
        def attrText = updateAttr(readFile(attributesFileName), artifactVersion)
        println attrText
        writeFile file: attributesFileName, text: attrText
        // increase version of cookbook
        def metadata = updateMeta(readFile(metadataFileName))
        println metadata.text
        writeFile file: metadataFileName, text: metadata.text
        // update cookbook version in environment file
        def envText = updateEnv(readFile(environmentFileName), metadata.version)
        println envText
        writeFile file: environmentFileName, text: envText
    }
    stage(&quot;Update environment and $cookbook cookbook&quot;) {
        sh &quot;knife environment from file $environmentFileName&quot;
        sh &quot;&quot;&quot;knife cookbook \
              upload $cookbook \
              --cookbook-path cookbooks
           &quot;&quot;&quot;
    }
    stage(&quot;Execute chef-client&quot;) {
        withCredentials(
            [usernamePassword(
                credentialsId: &apos;knifeSSH&apos;,
                usernameVariable: &apos;user&apos;,
                passwordVariable: &apos;pass&apos;)]) {
            sh &quot;&quot;&quot;knife ssh \
                  &apos;role:$role AND chef_environment:$environment&apos; \
                  chef-client \
                  -x $user \
                  -P $pass \
               &quot;&quot;&quot;
        }
    }
    stage(&quot;Publish&quot;) {
        withCredentials(
            [usernameColonPassword(
                credentialsId: &quot;GithubCredential&quot;,
                variable: &quot;credentials&quot;)]) {
            sh &quot;&quot;&quot;set -x \
                &amp;&amp; git \
                    -c user.name=&apos;Jenkins&apos; \
                    -c user.email=&apos;without@email.com&apos; \
                    commit -am &apos;Jenkins $artifactVersion&apos; \
                &amp;&amp; git push ${gitUrl(credentials)} master\
            &quot;&quot;&quot;
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>